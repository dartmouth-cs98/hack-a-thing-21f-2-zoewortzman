{"ast":null,"code":"var _jsxFileName = \"/Users/zoewortzman/Documents/cs98/loginpage/src/LoginForm.js\";\nimport React from 'react';\nimport InputFIeld from './InputField';\nimport SubmitButton from './SubmitButton';\nimport UserStore from './stores/UserStore';\nimport { unstable_renderSubtreeIntoContainer } from 'react-dom';\nimport InputField from './InputField';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass LoginForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      username: '',\n      password: '',\n      buttonDisabled: false\n    };\n  }\n\n  setInputValue(property, val) {\n    val = val.trim();\n\n    if (val.lengeth > 12) {\n      return;\n    }\n\n    this.setState({\n      [property]: val\n    });\n  }\n\n  resetForm() {\n    this.setState({\n      username: '',\n      password: '',\n      buttonDisabled: false\n    });\n  }\n\n  async doLogin() {\n    if (!this.state.username) {\n      return;\n    }\n\n    if (!this.state.passwrod) {\n      return;\n    }\n\n    this.setState({\n      buttonDisabled: true\n    });\n\n    try {\n      let res = await fetch('/login', {\n        method: 'post',\n        headers: {\n          'Accept': 'application/json',\n          'Conent-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          username: this.state.username,\n          password: this.state.password\n        })\n      });\n      let result = await res.json();\n\n      if (result && result.sucess) {\n        UserStore.isLoggedIn = true;\n        UserStore.username = result.username;\n      } else if (result && result.success === false) {\n        this.resetForm();\n        alert(result.msg);\n      }\n    } catch (e) {\n      console.log(e);\n      this.resetForm();\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loginForm\",\n      children: [\"Log in\", /*#__PURE__*/_jsxDEV(InputField, {\n        type: \"text\",\n        placeholder: \"Username\",\n        value: this.state.username ? this.state.username : '',\n        onChange: val => this.setInputValue('username', val)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputField, {\n        type: \"password\",\n        placeholder: \"Password\",\n        value: this.state.password ? this.state.username : '',\n        onChange: val => this.setInputValue('password', val)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(SubmitButton, {\n        text: \"Login\",\n        disabled: this.state.buttonDisabled,\n        onClicl: () => this.doLogin\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default LoginForm;","map":{"version":3,"sources":["/Users/zoewortzman/Documents/cs98/loginpage/src/LoginForm.js"],"names":["React","InputFIeld","SubmitButton","UserStore","unstable_renderSubtreeIntoContainer","InputField","LoginForm","Component","constructor","props","state","username","password","buttonDisabled","setInputValue","property","val","trim","lengeth","setState","resetForm","doLogin","passwrod","res","fetch","method","headers","body","JSON","stringify","result","json","sucess","isLoggedIn","success","alert","msg","e","console","log","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport InputFIeld from './InputField';\nimport SubmitButton from './SubmitButton';\nimport UserStore from './stores/UserStore';\nimport { unstable_renderSubtreeIntoContainer } from 'react-dom';\nimport InputField from './InputField';\n\nclass LoginForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      username: '',\n      password: '',\n      buttonDisabled: false\n\n    }\n  }\n\n  setInputValue(property,val) {\n    val =val.trim();\n    if (val.lengeth >12) {\n      return;\n    }\n    this.setState({\n      [property]: val\n\n    })\n  }\n\n  resetForm() {\n    this.setState({\n      username: '',\n      password: '',\n      buttonDisabled: false\n    })\n  }\n\n  async doLogin() {\n    if (!this.state.username) {\n      return;\n    }\n    if (!this.state.passwrod) {\n      return\n    }\n\n    this.setState({\n      buttonDisabled: true\n    })\n\n    try {\n      let res = await fetch('/login', {\n        method: 'post',\n        headers: {\n          'Accept': 'application/json',\n          'Conent-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          username: this.state.username,\n          password: this.state.password\n\n        })\n      });\n      let result = await res.json();\n      if (result && result.sucess) {\n        UserStore.isLoggedIn = true;\n        UserStore.username=result.username;\n      }\n      else if (result &&result.success === false) {\n        this.resetForm();\n        alert(result.msg);\n\n      }\n    }\n    catch(e) {\n      console.log(e);\n      this.resetForm();\n    }\n\n  }\n\n  render() {\n    return (\n      <div className=\"loginForm\">\n        Log in \n        <InputField\n          type='text'\n          placeholder='Username'\n          value={this.state.username ? this.state.username : ''}\n          onChange={ (val) => this.setInputValue('username', val)}\n        />\n\n        <InputField\n          type='password'\n          placeholder='Password'\n          value={this.state.password ? this.state.username : ''}\n          onChange={ (val) => this.setInputValue('password', val)}\n        />\n\n        <SubmitButton \n          text ='Login'\n          disabled={this.state.buttonDisabled}\n          onClicl={ () => this.doLogin}\n        />\n      </div>\n    );\n  }\n}\n\nexport default LoginForm;\n"]},"metadata":{},"sourceType":"module"}